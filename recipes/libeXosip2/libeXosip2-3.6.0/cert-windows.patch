diff -urN libeXosip2-3.6.0/src/eXtl_tls.c libeXosip2-3.6.0-mod/src/eXtl_tls.c
--- libeXosip2-3.6.0/src/eXtl_tls.c	2013-05-03 09:20:25.000000000 +0200
+++ libeXosip2-3.6.0-mod/src/eXtl_tls.c	2013-05-03 09:19:50.000000000 +0200
@@ -34,6 +34,19 @@
 
 #ifdef WIN32
 #include <wincrypt.h>
+/* MinGW w32api is incomplete when it comes to CryptoAPI, as per version 3.1
+ * anyway. This is a hack around that problem. */
+#define CALG_SSL3_SHAMD5 (ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SSL3SHAMD5)
+#define CERT_SYSTEM_STORE_LOCATION_SHIFT 16
+#define CERT_SYSTEM_STORE_CURRENT_USER_ID 1
+#define CERT_SYSTEM_STORE_CURRENT_USER (CERT_SYSTEM_STORE_CURRENT_USER_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT)
+#define CERT_STORE_READONLY_FLAG 0x00008000
+#define CERT_STORE_OPEN_EXISTING_FLAG 0x00004000
+#define CRYPT_ACQUIRE_COMPARE_KEY_FLAG 0x00000004
+#define CERT_CHAIN_REVOCATION_CHECK_END_CERT           0x10000000
+#define CERT_CHAIN_REVOCATION_CHECK_CHAIN              0x20000000
+#define CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x40000000
+#define CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY         0x80000000
 #else
 #ifdef HAVE_FCNTL_H
 #include <fcntl.h>
@@ -258,89 +271,93 @@
 #ifdef WIN32
 	PCCERT_CONTEXT pCertCtx;
 	X509 *cert = NULL;
-	HCERTSTORE hStore = CertOpenSystemStore(0, L"CA");
+	HCERTSTORE hStore = CertOpenStore(CERT_STORE_PROV_SYSTEM, 0, NULL, CERT_STORE_READONLY_FLAG | CERT_SYSTEM_STORE_CURRENT_USER, L"CA");
+	if(hStore != NULL) {
+		for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
+			 pCertCtx != NULL;
+			 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
+			cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
+							pCertCtx->cbCertEncoded);
+			if (cert == NULL) {
+				continue;
+			}
+			/*tls_dump_cert_info("CA", cert); */
 
-	for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
-		 pCertCtx != NULL;
-		 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
-		cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
-						pCertCtx->cbCertEncoded);
-		if (cert == NULL) {
-			continue;
+			if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
+				continue;
+			}
+			count++;
+			X509_free(cert);
 		}
-		/*tls_dump_cert_info("CA", cert); */
 
-		if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
-			continue;
-		}
-		count++;
-		X509_free(cert);
+		CertCloseStore(hStore, 0);
 	}
 
-	CertCloseStore(hStore, 0);
-
-	hStore = CertOpenSystemStore(0, L"ROOT");
+	hStore = CertOpenStore(CERT_STORE_PROV_SYSTEM, 0, NULL, CERT_STORE_READONLY_FLAG | CERT_SYSTEM_STORE_CURRENT_USER, L"ROOT");
+	if(hStore != NULL) {
+		for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
+			 pCertCtx != NULL;
+			 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
+			cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
+							pCertCtx->cbCertEncoded);
+			if (cert == NULL) {
+				continue;
+			}
+			/*tls_dump_cert_info("ROOT", cert); */
 
-	for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
-		 pCertCtx != NULL;
-		 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
-		cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
-						pCertCtx->cbCertEncoded);
-		if (cert == NULL) {
-			continue;
+			if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
+				continue;
+			}
+			count++;
+			X509_free(cert);
 		}
-		/*tls_dump_cert_info("ROOT", cert); */
 
-		if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
-			continue;
-		}
-		count++;
-		X509_free(cert);
+		CertCloseStore(hStore, 0);
 	}
 
-	CertCloseStore(hStore, 0);
-
-	hStore = CertOpenSystemStore(0, L"MY");
+	hStore = CertOpenStore(CERT_STORE_PROV_SYSTEM, 0, NULL, CERT_STORE_READONLY_FLAG | CERT_SYSTEM_STORE_CURRENT_USER, L"MY");
+	if(hStore != NULL) {
+		for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
+			 pCertCtx != NULL;
+			 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
+			cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
+							pCertCtx->cbCertEncoded);
+			if (cert == NULL) {
+				continue;
+			}
+			/*tls_dump_cert_info("MY", cert); */
 
-	for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
-		 pCertCtx != NULL;
-		 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
-		cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
-						pCertCtx->cbCertEncoded);
-		if (cert == NULL) {
-			continue;
+			if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
+				continue;
+			}
+			count++;
+			X509_free(cert);
 		}
-		/*tls_dump_cert_info("MY", cert); */
 
-		if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
-			continue;
-		}
-		count++;
-		X509_free(cert);
+		CertCloseStore(hStore, 0);
 	}
 
-	CertCloseStore(hStore, 0);
-
-	hStore = CertOpenSystemStore(0, L"Trustedpublisher");
+	hStore = CertOpenStore(CERT_STORE_PROV_SYSTEM, 0, NULL, CERT_STORE_READONLY_FLAG | CERT_SYSTEM_STORE_CURRENT_USER, L"Trustedpublisher");
+	if(hStore != NULL) {
+		for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
+			 pCertCtx != NULL;
+			 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
+			cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
+							pCertCtx->cbCertEncoded);
+			if (cert == NULL) {
+				continue;
+			}
+			/*tls_dump_cert_info("Trustedpublisher", cert); */
 
-	for (pCertCtx = CertEnumCertificatesInStore(hStore, NULL);
-		 pCertCtx != NULL;
-		 pCertCtx = CertEnumCertificatesInStore(hStore, pCertCtx)) {
-		cert = d2i_X509(NULL, (const unsigned char **) &pCertCtx->pbCertEncoded,
-						pCertCtx->cbCertEncoded);
-		if (cert == NULL) {
-			continue;
+			if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
+				continue;
+			}
+			count++;
+			X509_free(cert);
 		}
-		/*tls_dump_cert_info("Trustedpublisher", cert); */
 
-		if (!X509_STORE_add_cert(ctx->cert_store, cert)) {
-			continue;
-		}
-		count++;
-		X509_free(cert);
+		CertCloseStore(hStore, 0);
 	}
-
-	CertCloseStore(hStore, 0);
 #endif
 	return count;
 }
